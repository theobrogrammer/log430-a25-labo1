name: CI/CD simple

on:
  push:
    branches: [ "main" ]
  # (optionnel) lancer aussi sur les PR qui visent main
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Create a.env
        run: |
          cat > a.env <<'EOF'
          MYSQL_HOST=mysql
          MYSQL_DB_NAME=mydb
          DB_USERNAME=user
          DB_PASSWORD=pass
          MONGODB_HOST=mongo
          EOF

      - name: Build & Up
        run: |
          docker compose build
          docker compose up -d

      - name: Wait for MySQL & Mongo
        run: |
          for i in {1..60}; do
            docker exec $(docker ps -qf name=mysql) \
              mysqladmin ping -h 127.0.0.1 -uuser -ppass --silent && break
            sleep 1
          done
          for i in {1..60}; do
            docker exec $(docker ps -qf name=mongo) \
              mongosh --quiet --eval 'db.runCommand({ ping: 1 })' && break
            sleep 1
          done

      # Quick diagnostics (prints once in CI for easier troubleshooting)
      - name: Show app env (debug)
        run: docker compose exec -T store_manager_app env | egrep 'MYSQL|DB_|MONGO' || true

      - name: Verify MySQL schema (debug)
        run: |
          docker exec $(docker ps -qf name=mysql) bash -lc \
            'mysql -uuser -ppass -e "SHOW DATABASES; USE mydb; SHOW TABLES; SELECT 1;"'
        continue-on-error: true

      - name: Verify Mongo (debug)
        run: |
          docker exec $(docker ps -qf name=mongo) bash -lc \
            'mongosh --quiet --eval "db.getSiblingDB(\"mydb\").users.countDocuments()"'
        continue-on-error: true

      - name: Run tests
        run: docker compose exec -T -e PYTHONPATH=/app/src store_manager_app pytest -q


  deploy:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Ensure a.env
        run: |
          [ -f a.env ] || cat > a.env <<'EOF'
          MYSQL_HOST=mysql
          MYSQL_DB_NAME=mydb
          DB_USERNAME=user
          DB_PASSWORD=pass
          MONGODB_HOST=mongo
          EOF

      - name: Deploy
        run: |
          docker compose up -d
          docker compose ps
